#include "esphome.h"
#include <cmath>
#include <vector>
#include <chrono>

class comfortzone_heatpump;

namespace esphome::comfortzone
{
  using esphome::binary_sensor::BinarySensor;
  using esphome::climate::Climate;
  using esphome::climate::ClimateCall;
  using esphome::climate::ClimateTraits;
  using esphome::sensor::Sensor;
  using esphome::text_sensor::TextSensor;
  using esphome::uart::UARTComponent;
  using esphome::uart::UARTDevice;

  class ComfortzoneHeatpumpClimate : public Climate
  {
  public:
    void control(const ClimateCall &call) override;
    ClimateTraits traits() override;
  };

  class ComfortzoneWaterHeaterClimate : public Climate
  {
  public:
    void control(const ClimateCall &call) override;
    ClimateTraits traits() override;
  };

  class ComfortzoneComponent : public Component, public UARTDevice
  {
  public:
    static ComfortzoneComponent *get_singleton(UARTComponent *parent, int de_pin);

    float get_setup_priority() const override;

    std::vector<Sensor *> get_sensors();

    std::vector<BinarySensor *> get_binary_sensors();

    std::vector<TextSensor *> get_text_sensors();

    std::vector<Climate *> get_climate_entities();

    void dump_config() override;

    void debug_reroute(const std::string &ip, int port, int timeout);

    bool set_sensor_offset(int sensor_num, float temp_offset); // sensor: [0:7], offset in °C (-10.0° -> 10.0°)

    void override_indoor_temperature(float temp);

    bool set_fireplace_mode(bool enable);

    void setup() override;
    void loop() override;

  private:
    ComfortzoneComponent(UARTComponent *parent, int de_pin);

    void disable_debugging();
    void forward_to_udp();

    static ComfortzoneComponent *singleton;

    Sensor *fan_time_to_filter_change = new Sensor(); // days (proto: 1.60, 1.80)

    BinarySensor *filter_alarm = new BinarySensor(); // true = replace/clean filter alarm, false = filter ok (proto: 1.60, 1.80)

    BinarySensor *hot_water_production = new BinarySensor();     // true = on, false = off
    BinarySensor *room_heating_in_progress = new BinarySensor(); // true = on, false = off

    TextSensor *compressor_activity = new TextSensor();          // (proto: 1.60, 1.80)
    BinarySensor *additional_power_enabled = new BinarySensor(); // true = resistor is enabled, false = resistor is disabled (proto: 1.60, 1.80)

    TextSensor *mode = new TextSensor();                // (proto: 1.60, 1.80)
    BinarySensor *defrost_enabled = new BinarySensor(); // true = defrost in progress, false = no defrost in progress (proto: 1.60, 1.80)

    Sensor *sensors_te0_outdoor_temp = new Sensor();    // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te1_flow_water = new Sensor();      // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te2_return_water = new Sensor();    // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te3_indoor_temp = new Sensor();     // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te4_hot_gas_temp = new Sensor();    // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te5_exchanger_out = new Sensor();   // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te6_evaporator_in = new Sensor();   // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te7_exhaust_air = new Sensor();     // °C, * 10 (proto: 1.60, 1.80)
    Sensor *sensors_te24_hot_water_temp = new Sensor(); // °C, * 10 (proto: 1.60, 1.80)

    Sensor *heatpump_current_compressor_frequency = new Sensor(); // Hz, * 10 (proto: 1.60, 1.80)

    Sensor *heatpump_current_compressor_power = new Sensor();               // W = power generated by compressor (proto: 1.60, 1.80)
    Sensor *heatpump_current_add_power = new Sensor();                      // W = additional power (resistor) (proto: 1.60, 1.80)
    Sensor *heatpump_current_total_power = new Sensor();                    // W = total power produced (proto: 1.60, 1.80)
    Sensor *heatpump_current_compressor_input_power = new Sensor();         // W = power sent to compressor (proto: 1.60, 1.80)
    Sensor *heatpump_current_compressor_heating_input_power = new Sensor(); // W = power sent to compressor (proto: 1.60, 1.80)
    Sensor *heatpump_current_compressor_water_input_power = new Sensor();   // W = power sent to compressor (proto: 1.60, 1.80)

    Sensor *compressor_energy = new Sensor(); // kWh, * 100 (proto: 1.60, 1.80)
    Sensor *add_energy = new Sensor();        // kWh, * 100 (proto: 1.60, 1.80)
    Sensor *hot_water_energy = new Sensor();  // kWh, * 100 (proto: 1.60, 1.80)

    Sensor *compressor_runtime = new Sensor(); // minutes (proto: 1.60, 1.80)
    Sensor *total_runtime = new Sensor();      // minutes (proto: 1.60, 1.80)

    // current user settings
    TextSensor *fan_speed = new TextSensor(); // 1 = low, 2 = normal, 3 = fast

    Sensor *room_heating_setting = new Sensor();                // °C, * 10 (user selected) (proto: 1.60, 1.80)
    Sensor *hot_water_setting = new Sensor();                   // °C, * 10 (user selected) (proto: 1.60, 1.80)
    BinarySensor *extra_hot_water_setting = new BinarySensor(); // true = on, false = off

    TextSensor *hot_water_priority_setting = new TextSensor(); // 1 = low, 2 = normal, 3 = fast

    // current heatpump calculated setting
    Sensor *fan_speed_duty = new Sensor();               // %, * 10 (proto: 1.60, 1.80)
    Sensor *hot_water_calculated_setting = new Sensor(); // °C, * 10 (heatpump selected). can be hot_water_setting (no extra hot water) or a different value (proto: 1.60, 1.80)

    Sensor *expansion_valve_calculated_setting = new Sensor(); // K, * 10 (proto: 1.60, 1.80)
    Sensor *expansion_valve_temperature_difference = new Sensor(); // K, * 10 (proto: 1.60, 1.80)

    Sensor *heating_cop = new Sensor();
    Sensor *water_cop = new Sensor();

    Sensor *sensors_te3_indoor_temp_offset = new Sensor();

    Sensor *target_flow_water_temperature = new Sensor();

    ComfortzoneHeatpumpClimate *heatpump_climate = new ComfortzoneHeatpumpClimate();
    ComfortzoneWaterHeaterClimate *water_heater_climate = new ComfortzoneWaterHeaterClimate();

    // for debugging purposes
    uint8_t *grab_buffer = new uint8_t[256];
    uint16_t grab_frame_size = 0;
    std::chrono::system_clock::time_point debug_until = {};
    struct sockaddr_in src_addr;
    struct sockaddr_in dest_addr;
    std::unique_ptr<socket::Socket> sock = nullptr;

    comfortzone_heatpump *heatpump;
    bool power_changed = false;

    std::chrono::system_clock::time_point last_indoor_temperature_override = {};
  };
}
